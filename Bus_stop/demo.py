#!/usr/bin/python
import psycopg2
from shapely import wkb
from dijkstra import Graph
from dijkstra_origin import Graph as Gra
import numba
from numba import jit
from shapely import wkb
# check if two array has at least one element
from shapely.geometry import Point
import json
import sys
# load data
with open("station_data_1.json", "r") as input:
    stations = json.load(input)

with open("graph1.json", "r") as input:
    graph1 = json.load(input)
with open("graph2.json", "r") as input:
    graph2 = json.load(input)
with open("graph3.json", "r") as input:
    graph3 = json.load(input)
with open("graph4.json", "r") as input:
    graph4 = json.load(input)
with open("graph5.json", "r") as input:
    graph5 = json.load(input)
with open("bus_data.json", "r") as input:
    buses = json.load(input)



def findFirstCommonMember(a, b):
    for i in a:
        if i in b:
            return i
    return -1


def common_member(a, b):
    a_set = set(a)
    b_set = set(b)
    if (a_set & b_set):
        return True
    else:
        return False


conn = psycopg2.connect(database="BusStopDatabase", user="postgres",
                        password="125808037", host="127.0.0.1", port="5432")

cur = conn.cursor()


def getListIdStation():
    cur.execute("select id from station")
    rows = cur.fetchall()
    return [row[0] for row in rows]

# print(getListIdStation())


# Tinh khoang cach giua2 station:
#  neu co ton tai  1 xe bus giua 2 station nay thi khoang cach
#  duoc tinh theo khoang cach euclid

layers = []
listStations = getListIdStation()


def getListBus(id):
    cur.execute("select idbus from bus_station where idstation={}".format(id))
    rows = cur.fetchall()
    return list(set([row[0] for row in rows]))

# print(getListBus(100))


def checkHasBusBetweenTwoStation(id1, id2):
    listBusOfStation1 = stations[str(id1)]["bus"]
    listBusOfStation2 = stations[str(id2)]["bus"]
    return common_member(listBusOfStation1, listBusOfStation2)

# print(checkHasBusBetweenTwoStation(1, 38))


def getDirections(stationId, busId):
    cur.execute("select direction from bus_station where idbus={} and idstation={}".format(
        busId, stationId))
    rows = cur.fetchall()
    return [row[0] for row in rows]

# print(getDirections(1749, 1))


def isSameDirection(id1, id2):
    listBus1 = stations[str(id1)]["bus"]
    listBus2 = stations[str(id2)]["bus"]
    listIntersect = list(set(listBus1) & set(listBus2))
    for busId in listIntersect:
        direction1 = getDirections(id1, busId)
        direction2 = getDirections(id2, busId)
        if len(direction1) == 2 or len(direction2) == 2:
            return True
        else:
            return direction1[0] == direction2[0]


def calDistanceBetweenTwoAnyStation(id1, id2):
    p1 = Point(stations[str(id1)]["location"])
    p2 = Point(stations[str(id2)]["location"])
    return p1.distance(p2)


def calDistanceBetweenTwoStation(id1, id2):
    if id1 == id2 or checkHasBusBetweenTwoStation(id1, id2) == False or isSameDirection(id1, id2) == False:
        return 0
    else:
        p1 = Point(stations[str(id1)]["location"])
        p2 = Point(stations[str(id2)]["location"])
        return p1.distance(p2)

# print(calDistanceBetweenTwoStation(1, 2))

# print(calDistanceBetweenTwoStation(4496, 4500))
# print(getListBus(2769))
# print(getListBus(2808))
#  [4496, 4497, 4498, 4499, 4500],
#     [2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790,
#         2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812],


# print(isSameDirection(1, 9))
def checkConnected(layer, id):
    for station_id in layer:
        if checkHasBusBetweenTwoStation(station_id, id):
            return True
    return False


# for id in listStations:
#     booll = False
#     for i in range(len(layers)):
#         if checkConnected(layers[i], id):
#             layers[i].append(id)
#             booll = True
#             break
#     if booll == False:
#         layers.append([id])

# for layer in layers:
#     print(layer)
# for station_id in range(1, NO_STATION + 1):
#     result = []
#     for id in range(1, NO_STATION + 1):
#         if id == station_id:
#             result.append(0)
#         else:
#             result.append(calculateDistance(station_id, id))

# print(getNumberStation())

# cur.execute("select * from station")
# rows = cur.fetchall()
# s = 0
# for row in rows:
#     s +=1
#     print(wkb.loads(row[3], hex=True))

# print(s)

# for i in range(1, 30 +1):
#     print(getListBus(i))

layers = [
    [1670, 550, 552, 553, 868, 185, 186, 824, 181, 325, 326, 253, 254, 520, 667, 668, 533, 4423, 534, 535, 544, 536, 537, 797, 798, 799, 800, 643, 644, 645,
     646, 647, 648, 649, 650, 1470, 1749, 1487, 4549, 651, 652, 653, 654, 655, 656, 657, 801, 802, 803, 804, 538, 539, 545, 4072, 541, 542, 543, 664, 666, 519, 251, 252, 749, 636, 637, 632, 633, 770, 554, 556, 455, 1667, 759, 754, 347, 2183, 179, 180, 726, 727, 95, 773, 66, 717, 718, 719, 1750, 714, 715, 716,
     531, 532, 176, 177, 178, 606, 1673, 166, 167, 168, 169, 171, 323, 324, 750, 752, 753, 764, 777, 778, 555, 1740, 551, 769, 779, 780, 755, 756, 757, 758, 327, 328, 157, 158, 159, 160, 161, 2820, 165, 2965, 81, 405, 406, 407, 408, 409, 1209, 2964, 4491, 3228, 3229, 1803, 3484, 4332, 4333, 4334, 5130, 5131, 5115, 5132, 5133, 4329, 4330, 4331, 2127, 1804, 3237, 3238, 4490, 2826, 1210, 400, 401, 402, 403, 404, 82, 162, 163, 164, 429, 430, 1712, 865, 489, 390, 348, 662, 663, 385, 296, 297, 298, 661, 377, 378, 4128, 380, 381, 382, 109, 4961, 111, 112, 3267, 113, 5108, 1132, 3269, 5107, 3271, 1131, 5109, 3287, 114, 3273, 115, 116, 1857, 4976, 371, 372, 373, 4136, 375, 376, 527, 293, 294, 295, 383, 384, 605, 391, 190, 188, 858, 1711, 479, 480, 494, 495, 56, 272, 273, 274, 275, 266, 267, 546, 547, 225, 226, 465, 841, 807, 808, 720, 4972, 721, 1813, 1811, 1809, 1807, 4185, 122, 123, 124, 1786, 125, 126, 127, 239, 1808, 1810, 1812, 1814, 722, 4973, 809, 810, 842, 470, 223, 224, 4953, 548, 264, 265, 268, 269, 270, 271, 57, 4874, 1679, 431, 432, 433, 434, 435, 436, 437, 438, 1224, 4568, 4569, 1226, 1228, 1227, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 4220, 1247, 1248, 1249, 1250, 3081, 3082, 1755, 3083, 3084, 3085, 1252, 1253, 1254, 4260, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1223, 1270, 1271, 1272, 1273, 1274, 1275, 4570, 4571, 1277, 439, 440, 441, 442, 443, 444, 445, 446, 447, 1682, 1489, 1490, 1491, 1492,
     1493, 1748, 1494, 1495, 1496, 1497, 1498, 1681, 1499, 1500, 1501, 1783, 1502, 1503, 1504, 3876, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1683, 1517, 1519, 1521, 2950, 1529, 1531, 2920, 1533, 1535, 4940, 2639, 2640, 2638, 2641, 2642, 4941, 2637, 1534, 2921, 1532, 1530, 2951,
     1522, 1520, 1518, 61, 4873, 560, 561, 234, 235, 236, 228, 594, 595, 597, 596, 598, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897,
     1781, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 884, 913, 599, 601, 600, 602, 603, 238, 229, 230, 231, 4087, 58, 63, 1713, 425, 393, 33, 34, 35,
     36, 40, 344, 345, 743, 744, 1162, 1163, 1164, 1165, 1166, 1788, 1167, 1168, 1169, 1170, 1171, 45, 745, 342, 343, 39, 627, 628, 629, 183, 103, 1939, 1940, 448, 397, 4188, 117, 4189, 4190, 4191, 943, 944, 945, 946, 963, 947, 948, 4192, 949, 950, 964, 951, 952, 953, 954, 4193, 4194, 4195, 4196, 4197, 4866, 340, 96, 339, 106, 107, 108, 369, 370, 475, 2087, 5007, 2088, 2089, 3088, 3089, 3090, 5010, 4867, 3117, 3118, 3119, 3120, 3121, 46, 47, 48, 49, 282, 367,
     368, 831, 219, 220, 428, 337, 338, 94, 4868, 4869, 4870, 32, 768, 146, 147, 1900, 681, 247, 248, 472, 70, 71, 151, 5003, 60, 65, 789, 787, 788, 4871, 578, 792, 791, 790, 4841, 138, 139, 72, 73, 477, 249, 250, 322, 143, 5004, 145, 665, 767, 641, 4872, 4787, 3342, 866, 3316, 3317, 3318, 3319, 3320, 3148, 3149, 1815, 2967, 2968, 1207, 1208, 1189, 1190, 1191, 3321, 3322, 3323, 3324, 3325, 4840, 3327, 3328, 3329, 3330, 3331, 1187, 1188, 2971, 1195, 1196, 2969, 2970, 1816, 3154, 3155, 3332, 3333, 3334, 3335, 3336, 857, 3532, 4122, 1933, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3811, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 4427, 3550, 4984, 3552, 3553, 3554, 4428, 3555, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3812, 3813, 3564, 3565,
     3566, 3567, 3568, 3569, 3570, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4892, 4628, 4893, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 1472, 1473, 1474, 1475, 3685, 1476, 1477, 3613, 3614, 3615, 3616, 3617, 4856, 4932, 3619, 3620, 4928, 3621, 3622, 3623, 3624, 3625, 3626, 4929, 4356, 3627, 4357, 4358,
     4359, 4360, 4361, 3634, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 4812, 3646, 3647, 3648, 3649, 3650, 4813, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659, 3660, 3661, 3662, 4367, 4366, 4365, 4364, 4363, 3669, 4362, 4930, 3670, 2709, 3671, 3672, 3673, 3674, 3675, 3676, 4933,
     3677, 4857, 3679, 3680, 3681, 3682, 4934, 1480, 1481, 3684, 1482, 1483, 1484, 1485, 1486, 3781, 583, 585, 586, 587, 588, 259, 706, 2841, 707, 708, 3181,
     4939, 1921, 2844, 621, 622, 623, 1058, 3767, 2140, 4824, 3841, 4101, 4810, 3842, 3843, 4572, 3064, 4102, 3065, 3066, 2704, 2705, 2706, 4051, 2707, 2708,
     4811, 2710, 2711, 2712, 2713, 4103, 2714, 2715, 2716, 2717, 3782, 3783, 4104, 3784, 4573, 4105, 3785, 3786, 4106, 3787, 3788, 3789, 3844, 3845, 3846, 3791, 3847, 3792, 3848, 3849, 3794, 4982, 3850, 3851, 4980, 3796, 4981, 3854, 3855, 3856, 3857, 3858, 3800, 3859, 3801, 3860, 3861, 3862, 3803, 3804, 3805,
     4107, 3806, 3807, 4108, 4574, 3808, 4110, 3809, 3810, 2727, 2728, 2729, 2730, 4109, 2731, 2732, 2733, 2734, 2735, 4134, 4814, 2736, 2737, 4052, 2738, 3052, 2739, 3067, 3068, 4111, 3069, 4575, 3863, 3864, 4815, 4112, 3865, 4822, 2153, 2142, 1057, 624, 625, 626, 2843, 1928, 2909, 3172, 703, 704, 2842, 705,
     262, 573, 574, 575, 576, 577, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4986, 4595, 4957, 4597, 4598, 4944, 4599, 4600, 4601, 5048, 4956, 5059, 4829, 5060, 4605, 4606, 4607, 4945, 4135, 4608, 4609, 4958, 4611, 4985, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 3575, 331, 1895, 3576, 3577, 3298, 844, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3588, 3589, 3590, 492, 4121, 120, 121, 4905, 3869, 118, 119, 4143, 496, 491, 3596,
     3597, 3598, 3599, 3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609, 843, 3299, 584, 3610, 3611, 1911, 336, 3748, 3749, 3750, 3166, 2849, 3751,
     3752, 3820, 3755, 3756, 3757, 3758, 3759, 3760, 359, 210, 738, 806, 3761, 3762, 3763, 64, 3764, 62, 3765, 805, 739, 360, 365, 3768, 3769, 3770, 3771, 3772, 3773, 3821, 3775, 3776, 3777, 2847, 3780, 3778, 3779, 4118, 1059, 1060, 615, 279, 280, 4119, 4120, 44, 3261, 3262, 4123, 4124, 4125, 4126, 4127, 4129, 4130, 4131, 513, 5058, 4132, 505, 506, 4133, 4137, 4138, 4139, 4140, 4141, 3279, 3280, 4142, 4144, 4145, 277, 278, 616, 1055, 1056, 4147, 174, 290, 478, 740, 741, 2085, 2086, 1958, 1959, 1960, 1961, 1962, 5134, 1963, 4148, 1964, 2655, 1966, 1967, 2656, 2657, 1968, 1969, 1970, 4481, 1971, 4429, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 3689, 3688, 3687, 4149, 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4845, 4157, 4354, 4158, 4355, 4159, 4160, 4846, 4161, 4162, 4163, 4164, 4165, 4166, 4167, 4168, 3743, 3744, 4169, 2018, 2019, 2020, 4844, 2021, 2022, 4170, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 4991, 4992, 4993, 4994, 2034, 2035, 2036, 2037, 2038, 4171, 2083, 5152, 2084, 742, 737, 471, 473, 4959, 283, 284, 4219, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4560, 580, 593, 898, 917, 915, 916, 4561, 604, 581, 582, 1714, 557, 3416, 559, 420, 421, 422, 423, 424, 196, 197, 198, 199, 200, 1308, 1307, 1293, 1306, 1291, 1286, 1279, 1796, 1282, 1288, 1281, 1300, 1302, 1298, 191, 192, 193, 194, 195, 415, 416, 417, 418, 419, 549, 2966, 1134, 1135, 1136, 1137, 2108, 1138, 4942, 1139, 1140, 1794, 1141, 1142, 4943, 1143, 2109, 1144, 1145, 1146, 1147, 1702, 1073, 453, 454, 1202, 1203, 1204, 1205, 1206, 1148, 1149, 1150, 1765, 1151, 1152, 1153, 1197, 1198, 1199, 1200, 1201, 4215, 3955, 457, 1074, 3703, 3704, 3705, 4501, 3706, 4502, 3707, 4503, 3708, 4504, 4505, 4506, 4507, 4809, 4508, 4509, 4537, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520,
     4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4538, 4539, 4540, 4541, 3724, 4542, 3725, 4543, 3726, 4544, 3727, 3728, 3729, 4545, 4546, 4547, 4548, 4705, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4714, 4649, 4650, 4651, 4652, 4653, 4654, 4655,
     4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 5047, 4898,
     1628, 1629, 1662, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4800, 4762, 4763, 4764, 4765, 4761, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785,
     4786, 1663, 1664, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 1699, 500, 501, 77, 669, 670, 671, 67, 68, 724, 4894, 352, 353, 97, 98, 99, 1211, 1212, 1213, 1217, 1218, 1221, 4565, 1760, 4566, 1222, 4306, 1220, 1214, 1215, 1216, 100, 101, 102, 350, 351, 725, 723, 69, 4896, 673, 674, 76, 498, 499, 1701, 4794, 313, 300, 301, 302, 303, 304, 312, 233, 696, 781, 782, 245, 128, 129, 130, 131, 136, 1757, 137, 132, 133, 134, 135, 241, 242, 2137, 783, 784, 697, 232, 311, 305, 306, 307, 308, 309, 314, 310, 1669, 638, 639, 640, 690, 691, 692, 2126, 694, 695, 1758, 922, 216, 217, 218, 221, 222, 607, 608, 1936, 1671, 1340, 1341,
     1342, 1343, 1344, 1345, 1346, 5001, 1347, 1348, 1351, 1349, 1352, 1353, 1354, 1355, 1356, 3106, 1358, 1359, 1360, 1361, 5005, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 3871, 1371, 1372, 1373, 1374, 4950, 1375, 1376, 1377, 1785, 1378, 1379, 1380, 4951, 1381, 1382, 1383, 1384, 1370, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 5006, 1394, 1395, 1396, 1397, 1398, 840, 4067, 1400, 1401, 1402, 1403, 1350, 1404, 1405, 1406, 5002, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1744, 2113, 2114, 140, 141, 142, 812, 815, 1693, 630, 3283, 816, 813, 814, 148, 149, 150, 2111, 2112, 1715, 1328, 1329, 1330, 1331, 1332, 1333, 900, 1782, 899, 1334, 1335, 1336, 1337, 1338, 1339, 1708, 635, 387, 105, 679, 680, 2853, 2854, 172, 2855, 286, 530, 771, 631, 766, 839, 685, 1761, 37, 38, 682, 837, 838, 765, 793, 794, 856, 388, 389, 772, 4309, 2856, 92, 208, 209, 677, 678, 589, 386, 3257, 634, 341, 1729, 760, 761, 503, 2139, 872, 4962, 2644, 2645, 2646, 710, 711, 712, 713, 3300, 2832, 2833, 2834, 2835, 4995, 4996, 4997, 4998, 4999, 5000, 2837, 2838, 2839, 2840, 3301, 698, 699, 700, 701, 2690, 2691, 2692, 873, 410, 515, 516, 1458, 762, 763, 1697, 244, 1049, 1050, 1051, 1052, 1053, 1054, 1041, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 2859, 1427, 1428, 1429, 1430, 2860, 1431, 1432, 1433, 1434, 2669, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 5118, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 2671, 1449, 1450, 1451, 1452, 2862, 1453, 1454, 1455, 1456, 2861, 1457, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 240, 5119, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 5120, 5121, 5122, 5123, 5124, 1787,
     5125, 5126, 5127, 5128, 5129, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1686, 170, 591, 592, 1752, 590, 78, 1685, 1130, 43, 261, 2828, 2963, 2827, 260, 1133, 2851, 214, 215, 774, 3297, 289, 4974, 3177, 3178, 5153, 4557, 5154, 3175, 3176, 212, 213, 2846, 2144, 2145, 2146, 2149, 3164, 2147, 2150, 2151, 2152, 3165, 490, 567, 568, 569, 565, 566, 2848, 563, 564, 570, 572, 571, 497, 1727, 823, 203, 660, 346, 4960, 775, 206, 207, 86, 182, 426, 427, 1777, 189, 776, 83, 659, 204, 675, 1689, 867, 502, 399, 1753, 517, 3822, 3421, 3823, 3824, 3825, 3116, 2764, 4425, 2765, 5009, 3253, 2857, 93, 847, 848, 849, 1687, 850, 851, 852, 85, 2858, 3286, 3092, 2762, 4424, 2763, 3093, 3826, 3827, 3828, 3419, 1721, 525, 526, 684, 88, 4895, 335, 1789, 332, 1858, 90, 748, 683, 528, 529, 1694, 1774, 4904, 451, 452, 524, 734, 735, 736, 201, 1062, 1063, 1064, 1763, 1065, 1066, 1067, 202, 731, 732, 733, 521, 449, 450, 1675, 466, 4798, 1839, 1840, 1791, 1841, 1842, 468, 469, 211, 845, 846, 1707, 859, 860, 861, 413, 414, 17, 18, 19, 20, 21, 22, 876, 23, 1, 2, 3, 4, 5, 6, 7, 8, 1061, 1764, 1068,
     9, 10, 11, 12, 13, 14, 15, 16, 24, 5139, 26, 27, 28, 29, 30, 411, 412, 862, 863, 864, 187, 184, 1676, 730, 1778, 5093, 5094, 2746, 2747, 2748, 2749, 2750, 5116, 3173, 3174, 853, 1800, 854, 1915, 3179, 3180, 5117, 2694, 2695, 2696, 2697, 2698, 5095, 1692, 396, 1741, 728, 729, 1730, 80, 579, 1775, 79, 1731, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1039, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1636, 1773, 1655, 1028, 1656, 1029, 1030, 1031, 1032, 1657, 1033, 1034, 1035, 1040, 1658, 1036, 1037, 1038, 1011, 1009, 1716, 41, 42, 817, 818, 819, 1766, 1934, 1935, 4801, 821, 822, 3867, 3868, 1680, 276, 4550, 4551, 826, 827, 1471, 1478, 1756, 1479, 828, 829, 4552, 830, 281, 1724, 237, 1772, 642, 518, 658, 54, 4308, 227, 1700, 747, 522, 1843, 1844, 1845, 4836, 1846, 614, 617, 618, 619, 620, 1795, 609, 610, 611, 612, 613, 1847, 4837, 1848, 1849, 523, 746, 1704, 4209, 1192, 1193, 1194, 1172, 1173,
     1175, 1177, 1178, 4796, 1735, 1179, 1180, 1181, 4797, 1182, 1183, 1174, 1176, 4952, 1185, 1186, 3423, 3424, 3458, 855, 3425, 3263, 3243, 3426, 3224, 3278, 3427, 874, 875, 3428, 877, 878, 879, 3460, 3461, 3430, 392, 458, 693, 3429, 3459, 504, 3431, 981, 982, 983, 923, 933, 924, 925, 926, 927, 3432, 929, 930, 931, 932, 934, 3434, 3870, 992, 993, 994, 1717, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1738, 1089, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 4098, 1827, 2131, 1070, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 1829, 4273, 1830, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 1831, 4283, 1832, 4284, 4285, 4286, 4287, 4288, 4289, 4290, 4291, 4292, 2132, 1072,
     4208, 1828, 4096, 5148, 5149, 5150, 5151, 960, 961, 962, 510, 511, 512, 514, 5072, 5073, 1154, 1155, 3226, 5140, 3240, 1156, 507, 508, 509, 935, 936, 937, 1733, 394, 395, 87, 4969, 4968, 1913, 4860, 3204, 3288, 3517, 3518, 4963, 3498, 4967, 3193, 3194, 4861, 1893, 4970, 4971, 91, 4187, 1719, 688, 689, 153, 154, 5155, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 155, 156, 317, 205, 686, 687, 1734, 315, 1906, 4964, 4965, 4966, 316, 1705, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1771, 1539, 1540, 1541, 1542, 1543, 1550, 1551, 1552, 1706, 1544, 1545, 1546, 1762, 1547, 1548, 1549, 1709, 2953, 2954, 4554, 2955, 2956, 2957, 1001, 999, 1005, 998, 996, 995, 880, 1002, 997, 1003, 1006, 1004, 1000, 2958, 2959, 2960, 4553, 2961, 2962, 1817, 1818, 1819, 1820, 1821, 2998, 5081, 5082, 5083, 5084, 5085, 3049, 1823, 1824, 1825, 1826, 4426, 1720, 1289, 1325, 1299, 1321, 1301, 1295, 1320, 1294, 1323, 1317, 1327, 1310, 1280, 1290, 1287, 1284, 1311, 1312, 1792, 1313, 1296, 1285, 1319, 1283, 1278, 1309, 1314, 4307, 1303, 1322, 1304, 1324, 1316, 1315, 1305, 1326, 1297, 1690, 1754, 2830, 2831, 1725, 894, 965, 966, 967, 969, 970, 968, 971, 972, 1107, 1108, 1109, 1110, 1113, 1784, 1114, 1111, 1112, 1123, 1124, 973, 974, 977, 975, 976, 978, 979, 980, 904, 4889, 4890, 4891, 1115, 1116, 1536, 3983, 3984, 3985, 2974, 3986, 2975, 2976, 3987, 2977, 3988, 2978, 2979, 2980, 2981, 2982, 3990, 2983, 2984, 1853, 1854, 1855, 1122, 4887, 4888, 4897, 1850, 1851, 1852, 2985, 2986, 3991, 2987, 2988, 2989, 2990, 2991, 3993, 2992, 3994, 2993, 2994, 3995, 2995, 3996, 3997, 3998, 1120, 1538, 3485, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 4061, 4062, 3500, 3501, 3502, 3452, 3503, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 3504, 3505, 3506, 3507, 3486, 3508, 3509, 3510, 3511, 3512, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 3513, 3514, 3515, 3516, 4059, 4060, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3528, 3529, 3457, 3436, 3124, 3001, 3125, 3126, 3437, 3438, 3439, 3440, 3441, 3442, 1027, 3443, 3444, 3445, 3435, 3446, 3447, 3448, 1026, 3449, 3450, 3451, 3453, 3454, 3143, 3144, 3046, 3145, 3455, 3456, 3468, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 3470, 3471, 3472, 3473, 3474, 3475, 3476, 3469, 3477, 3478, 3479, 3480, 3481, 3482, 3483, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4478, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 3417, 3272, 485, 486, 487, 488, 3902, 481,
     482, 483, 484, 3268, 3422, 3420, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3901, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 1695,
     1747, 1710, 1630, 1632, 1633, 1635, 4202, 4203, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1793, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 4204, 4205, 1659, 1634, 1660, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3015, 3016, 3017, 3464, 3465, 3463, 4915, 3467, 3030, 3031, 3032,
     3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3388, 3389, 3390, 3391, 3392, 3393, 3395, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414,
     3415, 4864, 920, 918, 4865, 919, 921, 5011, 3877, 3878, 3879, 3880, 3881, 3882, 3883, 3891, 3892, 3893, 3894, 3895, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 3884, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 3896, 3897, 3898, 3899, 3900, 3885, 3886, 3887, 3888, 3889, 3890, 3686, 3690, 3691, 3692, 3693, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3745, 3746, 3747, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 5112, 5113, 1894, 1898, 1899, 364, 2143, 362, 1901, 1902, 2090, 4946, 459, 460, 461, 1903, 462, 463, 464, 4947, 2092, 1904, 1905, 363, 1907, 1908, 1910, 1912, 5114, 1916, 1931, 1919, 1920, 366, 1922, 5056, 5049, 5050, 4821, 5051, 5052, 5053, 4825, 5054, 5055, 5057, 1927, 358, 1929, 1930, 1932, 329, 31, 1780, 349, 398, 1941, 1942, 2082, 3939, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2753, 2047, 2048, 2049, 2050, 2051, 2060, 2069, 2070, 2071, 2751, 2073, 2754, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 3930, 4053, 1957, 2755, 1979, 1980, 1981, 1982, 2756, 4482, 4485, 4432, 1983, 1984, 4433, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 4431, 2007, 2008, 2009, 2010, 2757, 2011, 2012, 2758, 4430, 4484, 4483, 2759, 2013, 2014, 2015, 2016, 2643, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 4935, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 4938, 2660, 2661, 2662, 2663, 4899, 3931, 4900, 2664, 2665, 2666, 2667, 3932, 4842, 3933, 3934, 2670, 3935, 3936, 4901, 3937, 2673, 2674, 2675, 2676, 4902, 3938, 4903, 2677, 2678, 2679, 2680, 2681, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 4936, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 5111, 2767, 901, 2768, 2693, 5040, 2699, 2700, 2701, 2702, 2703, 4576, 2718, 4577, 2719, 4494, 2720, 4578, 2721, 2722, 2723, 4579, 2724, 4495, 2725, 4580, 2726, 4581, 2740, 2741, 2742, 2743, 2744, 2745, 2900, 2883, 2884, 5022, 2886, 2887, 3314, 2888, 2889, 2890, 2891, 4847, 2863, 2864,
     2865, 2866, 2867, 2868, 4848, 2869, 4948, 2870, 2871, 2901, 2903, 2902, 2873, 2874, 4949, 2875, 4849, 2876, 2877, 2878, 2879, 2880, 4850, 2881, 4851, 2882, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2996, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 3018, 4916, 3019, 4917, 3020, 4555, 3021, 3022,
     3023, 2997, 3024, 3025, 3026, 4556, 3027, 4918, 3028, 4919, 3029, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 3050, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3051, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3122, 3127, 3128, 3129, 3130, 3131, 3132, 3133,
     3134, 3123, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3086, 984, 985, 986, 987, 3094, 3095, 3096, 3097, 4858, 3098, 3099, 3100, 3101, 3102, 3104, 5076, 5077, 5078, 5079, 5080, 3105, 3107, 3108, 3109, 3110, 3111, 4859, 3112, 3113, 3114, 3115, 988, 989, 990, 991, 3182, 3183, 3184, 3185, 3186, 4055, 3187, 3188, 4954, 4056, 4057, 3191, 4058, 3196, 1918, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 4063, 3205, 4064, 4065, 4955, 3208, 3209, 4066, 3210, 3211, 3212, 3213, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 5135, 5136, 3230, 3231, 3232, 3290, 3234, 3235, 3236, 5137, 5138, 5074, 5075, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3289, 3254, 3255, 3256, 4799, 3259, 3260, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 3281, 3282, 3284, 3285],

    [1696],
    [3612],
    [4496, 4497, 4498, 4499, 4500],
    [2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790,
        2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812],

]

layer1 = layers[0]
layer2 = layers[1]
layer3 = layers[2]
layer4 = layers[3]
layer5 = layers[4]
# graph_for_layer1 = []
# graph_for_layer2 = []
# graph_for_layer3 = []
# graph_for_layer4 = []
# graph_for_layer5 = []

# def makeGraphForLayer(layer):
#     gray_for_layer = []
#     for id1 in layer:
#         temp = []
#         for id2 in layer:
#             temp.append(calDistanceBetweenTwoStation(id1, id2))
#         gray_for_layer.append(temp)
#     return gray_for_layer


# # print(len(layer5))
# print("waiting.....")
# graph_for_layer1 = makeGraphForLayer(layer5)
# with open("graph5.json", "w") as out:
#     out.write(json.dumps(graph_for_layer1, indent=4))
# print("successfully!")
# print(graph_for_layer5)
# layer1 = layer1[0:100]
# print(layer1)
# graph_for_layer1 = makeGraphForLayer(layer1)


# listStation = {}
# cur.execute("select id, geo, name from station")
# rows = cur.fetchall()
# for row in rows:
#     id = row[0]
#     p = Point(wkb.loads(row[1], hex=True))
#     bus = getListBus(id)
#     result = {}
#     result["location"] = [p.x, p.y]
#     result["bus"] = bus
#     result["name"] = row[2]
#     listStation[id] = result
#     # print("{} {}".format(id,p.x))

# print("export successed")
# print(listStation)
# with open("station_data_1.json", "w") as output:
#     output.write(json.dumps(listStation, indent=4))


# Make parent graph for 5 layer
mapNameToLayer = {
    "layer1": layer1,
    "layer2": layer2,
    "layer3": layer3,
    "layer4": layer4,
    "layer5": layer5,
}
mapNameToGraph = {
    "layer1": graph1,
    "layer2": graph2,
    "layer3": graph3,
    "layer4": graph4,
    "layer5": graph5,
}


def min_distance_of_two_layer(l1, l2):
    l1 = mapNameToLayer[l1]
    l2 = mapNameToLayer[l2]
    id_l1 = l1[0]
    id_l2 = l2[0]
    minDistance = calDistanceBetweenTwoAnyStation(id_l1, id_l2)
    for i in l1:
        for j in l2:
            if calDistanceBetweenTwoAnyStation(i, j) < minDistance:
                minDistance = calDistanceBetweenTwoAnyStation(i, j)
                id_l1, id_l2 = i, j
    return id_l1, id_l2, minDistance


largerGraph = []
for i in range(1, 6):
    largerGraph.append([0]*5)

listBridgeLayers = {}

for i in range(1, 6):
    listBridgeId = {}
    for j in range(i + 1, 6):
        id_l1, id_l2, minDistance = min_distance_of_two_layer(
            "layer{}".format(i), "layer{}".format(j))
        largerGraph[i - 1][j - 1] = minDistance
        largerGraph[j - 1][i - 1] = minDistance
        listBridgeId[j] = [id_l1, id_l2]
    listBridgeLayers[i] = listBridgeId


def findLayerContainsStation(stationId):
    for layerName in mapNameToLayer:
        if stationId in mapNameToLayer[layerName]:
            return layerName
    return -1


# print(findLayerContainsStation(3612))
def convertToTrustId(listId, layer):
    return [layer[id] for id in listId]


def convertFakeId(listId, layer):
    return [layer.index(id) for id in listId]


def findPathBetweenTwoLayer(startlayer, destlayer):
    g = Gra()
    graph = largerGraph
    startLayerId = int(startlayer[-1]) - 1
    destLayerId = int(destlayer[-1]) - 1
    tracking = g.dijkstra(graph, startLayerId, destLayerId)
    return [id + 1 for id in tracking]


# findPathBetweenTwoLayer("layer3", "layer4")


def findPathBetweenTwoStationInSameLayer(id1, id2, layerName):
    if id1 == id2:
        return [id1]
    layer = mapNameToLayer[layerName]
    graph = mapNameToGraph[layerName]
    #
    listFakeId = convertFakeId([id1, id2], layer)
    g = Graph()
    route = g.dijkstra(graph, listFakeId[0], listFakeId[1])
    return convertToTrustId(route, layer)


def findPathBetweenTwoStation(id1, id2):
    result = []
    layerOfId1 = findLayerContainsStation(id1)
    layerOfId2 = findLayerContainsStation(id2)
    if layerOfId1 == layerOfId2:
        route = findPathBetweenTwoStationInSameLayer(id1, id2, layerOfId1)
        result.append(route)
    else:
        bridge = findPathBetweenTwoLayer(layerOfId1, layerOfId2)
        # print(bridge)
        # print(bridge)
        bridgeIds = []
        for i in range(len(bridge) - 1):
            a = bridge[i]
            b = bridge[i+1]
            if a < b:
                bridgeIds.append(listBridgeLayers[a][b])
            else:
                twoId = listBridgeLayers[b][a]
                twoId.reverse()
                bridgeIds.append(twoId)
        # print(bridgeIds)
        startId = id1
        for index, couple in enumerate(bridgeIds):
            result.append(findPathBetweenTwoStationInSameLayer(
                startId, couple[0], "layer{}".format(bridge[index])))
            result.append(couple[1])
            startId = couple[1]
        if startId != id2:
            result.append(findPathBetweenTwoStationInSameLayer(
                startId, id2, "layer{}".format(bridge[-1])))
    # print(result)
    return result


# print(listBridgeLayers)
# print(listBridgeLayers[1][2])

# result = [[2773, 2791], 4309]

def trackListStationByBusId(busId, direction):
    cur.execute(
        "select idstation from bus_station where idbus = {} and direction={} order by station_order asc;".format(busId,direction))
    rows = cur.fetchall()
    return [row[0] for row in rows]


def trackStationBetweenTwoStationByBusId(station1, station2, busId):
    listStation = trackListStationByBusId(busId, 0)
    if station1 not in listStation or station2 not in listStation:
        listStation = trackListStationByBusId(busId, 1)
    id1 = listStation.index(station1)
    id2 = listStation.index(station2)
    if id1 <= id2:
        return listStation[id1:id2 + 1]
    else:
        return listStation[id2:id1 + 1][::-1]

def showResult(result):
    # print(result)
    resultString = []
    resultListStation = []
    bus = []
    foot = []
    if len(result[0]) == 1 and len(result) == 1:
        resultString.append("Đứng yên tại chỗ.")
        resultListStation.append(result[0][0])
        # print(resultString)
        return resultString, resultListStation,bus,foot
    else:
        # print(result[0])
        if len(result[0]) == 1:
            resultListStation.append(result[0][0])
        for i in range(len(result[0]) - 1):
            # print(result[0][i], result[0][i+1])
            listBusI = stations[str(result[0][i])]["bus"]
            listBusJ = stations[str(result[0][i+1])]["bus"]
            bus_intersect = findFirstCommonMember(listBusI, listBusJ)
            tracking = trackStationBetweenTwoStationByBusId(result[0][i], result[0][i+1], bus_intersect)
            for station in tracking:
                resultListStation.append(station)
            bus.append({
                'bus':buses[str(bus_intersect)],
                'start':stations[str(result[0][i])],
                'end':stations[str(result[0][i + 1])]
            })
            resultString.append(
                "Đi xe buýt {} từ {} đến {}".format(buses[str(bus_intersect)], stations[str(result[0][i])]["name"], stations[str(result[0][i + 1])]["name"]))

    if len(result) == 1:
        return resultString, resultListStation, bus, foot
    else:
        for i in range(1, len(result)):
            currentRow = result[i]
            if isinstance(currentRow, list):
                for i in range(len(currentRow) - 1):
                    listBusI = stations[str(currentRow[i])]["bus"]
                    listBusJ = stations[str(currentRow[i+1])]["bus"]
                    bus_intersect = findFirstCommonMember(listBusI, listBusJ)
                    tracking = trackStationBetweenTwoStationByBusId(currentRow[i], currentRow[i+1], bus_intersect)
                    for station in tracking:
                        resultListStation.append(station)
                    bus.append({
                                    'bus':buses[str(bus_intersect)],
                                    'start':stations[str(currentRow[i])],
                                    'end':stations[str(currentRow[i+1])]
                                })
                    resultString.append("Đi xe buýt {} từ {} đến {}".format(
                        buses[str(bus_intersect)], stations[str(currentRow[i])]["name"], stations[str(currentRow[i+1])]["name"]))
                # print(resultString)
            else:
                resultListStation.append(currentRow)
                foot.append({
                            'start':stations[str(result[i-1][-1])],
                            'end':stations[str(currentRow)]
                        })
                resultString.append("Đi  bộ  từ {} đến {}".format(
                    stations[str(result[i-1][-1])]["name"], stations[str(currentRow)]["name"]))
                if i != len(result) - 1 and currentRow != result[i + 1][0]:
                    foot.append({
                                'start':stations[str(currentRow)],
                                'end':stations[str(result[i+1][0])]
                            })
                    resultString.append("Đi bộ từ {} đến {}".format(
                        stations[str(currentRow)]["name"], stations[str(result[i+1][0])]["name"]))
    return resultString, resultListStation, bus, foot

# result = [[4742, 596, 597, 2112, 5118], 4496]

# Start tracking.....
# result = findPathBetweenTwoStation(560, 2810)
# print(result)
# resultString, resultListStation = showResult(result)
# print(resultListStation)
# for res in resultString:
#     print("---------------------------------------------------------------------------------")
#     print(res)
#     print("---------------------------------------------------------------------------------")

if __name__ == "__main__":
    import json
    start = int(sys.argv[1])
    stop = int(sys.argv[2])
    # print(start, stop)
    # print(sys.argv)
    result = findPathBetweenTwoStation(start, stop)
    # print(result)
    resultString, resultListStation, bus, foot = showResult(result)
    res = json.dumps({'result_string': resultString,
                      'result_list_station':resultListStation,
                      'bus':bus,
                      'foot':foot
                      },ensure_ascii=False).encode('utf8')
    #for res in resultString:
    #    print(res.encode('utf8'))
    #print(resultStr)
    #print(resultString)
    #print(resultListStation)
    # for res in resultString:
    #     print("---------------------------------------------------------------------------------")
    #     print(res)
    #     print("---------------------------------------------------------------------------------")
    #sys.stdout.reconfigure(encoding='utf-8')
    sys.stdout.buffer.write(res)
